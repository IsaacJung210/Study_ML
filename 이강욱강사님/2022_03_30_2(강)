{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "88bf0d1f-4610-473f-b838-1ea4882d5128",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(action='ignore')\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8ad41775-6115-4fab-b7d1-274b4e76fc67",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"data/titanic.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "711ba017-a589-490e-aa04-23741eaabffb",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 데이터 개요\n",
    "df.head()\n",
    "## 데이터 변수 확인\n",
    "df.columns # 변수 이름들 확인\n",
    "df.columns.size # 몇개의 변수\n",
    "df.shape # 행의 개수, 열의 개수\n",
    "df.dtypes # 변수의 데이터 타입 (수치형으로 변환을 위해)\n",
    "## 특징(변수)는 반드시 na가 있으면 안되므로 na 확인\n",
    "df.isna().sum()\n",
    "## 필요한 컬럼만 셀렉트\n",
    "selected_cols = [\"Pclass\",\"Name\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Ticket\",\"Fare\",\"Cabin\",\"Embarked\",\"Survived\"]\n",
    "data = df[selected_cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "67193c9c-551b-4fa1-b3ee-ef52d8d8eb8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 분석데이터 개요\n",
    "data.head()\n",
    "## 데이터 변수 확인\n",
    "data.columns # 변수 이름들 확인\n",
    "data.columns.size # 몇개의 변수\n",
    "data.shape # 행의 개수, 열의 개수\n",
    "data.dtypes # 변수의 데이터 타입 (수치형으로 변환을 위해)\n",
    "## 특징(변수)는 반드시 na가 있으면 안되므로 na 확인\n",
    "data.isna().sum()\n",
    "#data.info()\n",
    "## Na 정리\n",
    "#1. drop데이터 선별 (컬럼)\n",
    "# Cabin \n",
    "#2. drop데이터 선별 (로우)\n",
    "#Embarked\n",
    "#data.drop(data.Embarked.isna(),axis=0)\n",
    "data = data.loc[~data.Embarked.isna(),:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "b253daeb-6318-47a3-920f-7dade8a38d5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Cabin imputation\n",
    "# 수치형 --> 세심한 주의(평균 사용시 주의 요망)\n",
    "# 범주형데이터 --> real Na? 범주외의 대체값\n",
    "## Cabin EDA \n",
    "data.Cabin.str[:1].value_counts()\n",
    "data.Cabin.fillna(\"N\",inplace=True)\n",
    "data.isna().sum()\n",
    "data.Cabin.str[:1].value_counts()\n",
    "newCabin = data.Cabin.str[:1]\n",
    "data.drop(\"Cabin\",axis=1,inplace=True)\n",
    "data[\"Cabin\"] = newCabin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "8158ccca-ca18-4bbc-89eb-bd95bcccba59",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Age imputaion\n",
    "## Age EDA\n",
    "data.Age.describe()\n",
    "data.loc[data.Age <= 18,:] ##\n",
    "data.loc[data.Age.isna(),[\"Pclass\",\"Fare\"]] ## Age값이 NUll인 사람의 선실과 요금\n",
    "data.groupby([\"Pclass\",\"Sex\"])[\"Fare\"].mean()\n",
    "\n",
    "## Age 예측을 위한 회귀모델 생성\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n",
    "df_age = data.loc[~data.Age.isna(),[\"Pclass\",\"Sex\",\"Fare\",\"Embarked\",\"Age\"]]\n",
    "pred_age = data.loc[data.Age.isna(),[\"Pclass\",\"Sex\",\"Fare\",\"Embarked\"]]\n",
    "le_sex = LabelEncoder()\n",
    "le_sex.fit(df_age.Sex)\n",
    "newSex = le_sex.transform(df_age.Sex)\n",
    "le_embarked = LabelEncoder()\n",
    "le_embarked.fit(df_age.Embarked)\n",
    "newEmbarked = le_embarked.transform(df_age.Embarked)\n",
    "df_age.drop([\"Sex\",\"Embarked\"],axis=1,inplace=True)\n",
    "newCols = np.c_[newSex,newEmbarked]\n",
    "df_age = pd.concat([pd.DataFrame(newCols,index=df_age.index),df_age],axis=1)\n",
    "age_model = RandomForestRegressor()\n",
    "age_model.fit(df_age.iloc[:,:-1],df_age.iloc[:,-1])\n",
    "\n",
    "## Null 예측실행\n",
    "newSex = le_sex.transform(pred_age.Sex)\n",
    "newEmbarked = le_embarked.transform(pred_age.Embarked)\n",
    "pred_age.drop([\"Sex\",\"Embarked\"],axis=1,inplace=True)\n",
    "newCols = np.c_[newSex,newEmbarked]\n",
    "pred_age = pd.concat([pd.DataFrame(newCols,index=pred_age.index),pred_age],axis=1)\n",
    "newAge = age_model.predict(pred_age)\n",
    "pred_age[\"Age\"] = newAge\n",
    "\n",
    "## \n",
    "newAge = pd.merge(df_age,pred_age,how=\"outer\")[[\"Age\"]]\n",
    "newAge.reset_index(inplace=True)\n",
    "newAge.drop(\"index\",axis=1,inplace=True)\n",
    "\n",
    "## data에 newAge컬럼 추가\n",
    "data.reset_index(inplace=True)\n",
    "data.drop([\"Age\",\"index\"],axis=1,inplace=True)\n",
    "data[\"Age\"] = newAge\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "a4161cc4-855b-42e0-b69f-b13d285315ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 파생변수 생성 (Name) 결혼유무판단\n",
    "## data.Name에서 Mrs. 가 존재하면 기혼\n",
    "## data.Name에서 Mr. 가족(SibSp)이 있으면 기혼 혹은 25세 이상이면 기혼\n",
    "married = np.where((data.Name.str.contains(\"Mrs.\")) | ((data.Name.str.contains(\"Mr.\")) & (data.SibSp >0)),1,0)\n",
    "data[\"Married\"] = married"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "2701970f-9ee8-4483-970c-920ed5d7cd08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Age</th>\n",
       "      <th>Married</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>C</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>C</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>884</th>\n",
       "      <td>2</td>\n",
       "      <td>male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>27.608306</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>885</th>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>B</td>\n",
       "      <td>45.096500</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>34.802833</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>1</td>\n",
       "      <td>male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>C</td>\n",
       "      <td>25.848751</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>Q</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>22.241690</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>889 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pclass     Sex  SibSp  Parch     Fare Embarked  Survived Cabin  \\\n",
       "0         3    male      1      0   7.2500        S         0     N   \n",
       "1         1  female      1      0  71.2833        C         1     C   \n",
       "2         3  female      0      0   7.9250        S         1     N   \n",
       "3         1  female      1      0  53.1000        S         1     C   \n",
       "4         3    male      0      0   8.0500        S         0     N   \n",
       "..      ...     ...    ...    ...      ...      ...       ...   ...   \n",
       "884       2    male      0      0  13.0000        S         0     N   \n",
       "885       1  female      0      0  30.0000        S         1     B   \n",
       "886       3  female      1      2  23.4500        S         0     N   \n",
       "887       1    male      0      0  30.0000        C         1     C   \n",
       "888       3    male      0      0   7.7500        Q         0     N   \n",
       "\n",
       "           Age  Married  \n",
       "0    22.000000        1  \n",
       "1    22.000000        1  \n",
       "2    22.000000        0  \n",
       "3    38.000000        1  \n",
       "4    26.000000        0  \n",
       "..         ...      ...  \n",
       "884  27.608306        0  \n",
       "885  45.096500        0  \n",
       "886  34.802833        0  \n",
       "887  25.848751        0  \n",
       "888  22.241690        0  \n",
       "\n",
       "[889 rows x 10 columns]"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "1cc6796b-b7f4-4f28-b295-91b7b840e031",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pclass        int64\n",
       "Sex          object\n",
       "SibSp         int64\n",
       "Parch         int64\n",
       "Fare        float64\n",
       "Embarked     object\n",
       "Survived      int64\n",
       "Cabin        object\n",
       "Age         float64\n",
       "Married       int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Name, Ticket컬럼 제거\n",
    "data.drop([\"Name\",\"Ticket\"],axis=1,inplace=True)\n",
    "data.head()\n",
    "## data 컬럼 타입확인\n",
    "data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "d7e0414f-5728-4c02-a7d7-90a9eb90f44a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## preprocessing \n",
    "# categorical 변수에서 종류(unique)가 2개 이면 정수인코딩, 나머지는 원핫인코딩\n",
    "# obj = data.dtypes[data.dtypes == \"object\"].index\n",
    "# data[obj[0]].unique().size\n",
    "# 수치형(연속형)변수일 경우 정규화(MinMax, Robust, Standard)\n",
    "# mmScale = (X-np.min(X))/(np.max(X)-np.min(x))\n",
    "# rbScale = (X - np.percetile(X,50))/(np.percentile(X,75) - np.percentile(X,25))\n",
    "# stScale = (X - np.mean(x))/(np.sd(X))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "cf85c4f1-7737-4a6c-8a9d-ae13da275a42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(889, 36)"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# from sklearn.preprocessing import OneHotEncoder, LabelEncoder\n",
    "# newPclass = OneHotEncoder().fit_transform(data[[\"Pclass\"]]).toarray()\n",
    "# newSex = OneHotEncoder().fit_transform(data[[\"Sex\"]]).toarray()\n",
    "# newSibSp = OneHotEncoder().fit_transform(data[[\"SibSp\"]]).toarray()\n",
    "# newCols = np.c_[newPclass,newSex,newSibSp]\n",
    "# newCols.shape\n",
    "\n",
    "from sklearn.preprocessing import OneHotEncoder, LabelEncoder\n",
    "from sklearn.compose import make_column_transformer\n",
    "selected_cols = [\"Pclass\",\"Sex\",\"Parch\",\"SibSp\",\"Embarked\",\"Cabin\",\"Married\"]\n",
    "ct = make_column_transformer(\n",
    "    (OneHotEncoder(),selected_cols)\n",
    ")\n",
    "newCols = ct.fit_transform(data).toarray()\n",
    "data.drop(selected_cols,axis=1,inplace=True)\n",
    "data = pd.concat([pd.DataFrame(newCols),data],axis=1)\n",
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "9f69d97b-09e8-47dd-8a22-4c2d4c569253",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pclass        int64\n",
       "Sex          object\n",
       "SibSp         int64\n",
       "Parch         int64\n",
       "Fare        float64\n",
       "Embarked     object\n",
       "Survived      int64\n",
       "Cabin        object\n",
       "Age         float64\n",
       "Married       int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "0174f50d-da1c-4f4a-bbcc-9134238c1833",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(889, 12)"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "053a266f-daad-4023-bf23-043a7d92baa9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['ColumnTransformer',\n",
       " 'TransformedTargetRegressor',\n",
       " '__all__',\n",
       " '__builtins__',\n",
       " '__cached__',\n",
       " '__doc__',\n",
       " '__file__',\n",
       " '__loader__',\n",
       " '__name__',\n",
       " '__package__',\n",
       " '__path__',\n",
       " '__spec__',\n",
       " '_column_transformer',\n",
       " '_target',\n",
       " 'make_column_selector',\n",
       " 'make_column_transformer']"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import compose\n",
    "dir(compose)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "834264e8-e81d-4609-a52a-f3f5608a89c9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
